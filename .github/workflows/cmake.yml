name: CMake

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Ubuntu packages
      if: matrix.os == 'ubuntu-latest' 
      run: |
        sudo apt-get update && sudo apt-get install openssl libssl-dev xorg-dev

    - name: Install macOS packages
      if: matrix.os == 'macos-latest' 
      run: |
        brew update && brew install openssl

    - name: Install Windows packages
      if: matrix.os == 'windows-latest' 
      run: vcpkg install zlib openssl

    - name: Install Ubuntu VulkanSDK
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
        sudo apt-get update && sudo apt-get install vulkan-sdk

    - name: Install macOS VulkanSDK
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        curl -O https://sdk.lunarg.com/sdk/download/latest/mac/vulkan_sdk.dmg
        volumeInfo=$(hdiutil attach vulkan_sdk.dmg | grep Volumes)
        volume=$(echo "$volumeInfo" | cut -f 3)
        cp -rf $volume/InstallVulkan.app .
        sudo ./InstallVulkan.app/Contents/MacOS/InstallVulkan install com.lunarg.vulkan.core com.lunarg.vulkan.usr --al -c

    - name: Install Windows VulkanSDK
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        curl -O https://sdk.lunarg.com/sdk/download/latest/windows/vulkan_sdk.exe
        ./vulkan_sdk.exe install --al -c

    - name: Create build environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build project
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --parallel

    - name: Run tests
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE

    - name: Archive artifacts
      if: startsWith(github.ref, 'refs/tags/')
      working-directory: ${{runner.workspace}}
      shell: bash
      run: 7z a -mx9 ${{github.event.repository.name}}-${{github.ref_name}}-${{runner.os}}-${{runner.arch}}.zip ./build/*

    - name: Release artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: ${{runner.workspace}}/*.zip
