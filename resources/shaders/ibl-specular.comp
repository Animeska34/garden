// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "common/brdf.gsl"
#include "common/normal-mapping.gsl"

localSize = 16, 16, 1;

uniform samplerCube
{
	filter = linear;
} cubemap;

uniform writeonly restrict image2DArray specular : sfloatR16G16B16A16;

struct CacheItem
{
	float4 l;
	float4 nolMip;
};

buffer restrict readonly Cache
{
	CacheItem items[];
} cache;

uniform pushConstants
{
	uint32 imageSize;
	uint32 itemCount;
} pc;

// TODO: utilize shader memory or subgroups

//**********************************************************************************************************************
void main()
{
	if (any(greaterThanEqual(gl.globalInvocationID.xy, uint2(pc.imageSize))))
		return;

	float3 dir = coordsToDir(gl.globalInvocationID, 1.0f / pc.imageSize);
	float3x3 tbn = approximateTBN(dir);
	// TODO: try to add blue noise random rotation. It may improve quality.

	float3 li = float3(0.0f);
	for (uint32 i = 0; i < pc.itemCount; i++)
	{
		CacheItem item = cache.items[i];
		float3 l = tbn * item.l.xyz;
		float3 c0 = textureLod(cubemap, l, item.nolMip.y).rgb;
		li += c0 * item.nolMip.x;
	}

	imageStore(specular, int3(gl.globalInvocationID), float4(li, 1.0f));
}