// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatic exposure luminance histogram.
// Based on this: https://bruop.github.io/exposure/

#include "common/tone-mapping.gsl"

localSize = 16, 16, 1;

uniform sampler2D hdrBuffer;

buffer restrict Histogram
{
	uint32 data[];
} histogram;

uniform pushConstants
{
	float minLogLum;
	float invLogLumRange;
} pc;

shared uint32 histogramShared[256];

//**********************************************************************************************************************
uint32 colorToBin(float3 hdrColor, float minLogLum, float invLogLumRange)
{
	float lum = rgbToLum(hdrColor);
	if (lum < 0.005f)
		return 0;
	float logLum = clamp((log2(lum) - minLogLum) * invLogLumRange, 0.0f, 1.0f);
	return uint32(fma(logLum, 254.0f, 1.0f));
}

void main()
{
	uint32 localIndex = gl.localInvocationIndex;
	histogramShared[localIndex] = 0;
	barrier();

	int2 hdrSize = textureSize(hdrBuffer, 0);
	int2 globalID = int2(gl.globalInvocationID.xy);

	if (all(lessThan(globalID, hdrSize)))
	{
		float3 hdrColor = texelFetch(hdrBuffer, globalID, 0).rgb;
		uint32 binIndex = colorToBin(hdrColor, pc.minLogLum, pc.invLogLumRange);
		atomicAdd(histogramShared[binIndex], 1);
	}

	barrier();
	atomicAdd(histogram.data[localIndex], histogramShared[localIndex]);
}