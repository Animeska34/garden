//--------------------------------------------------------------------------------------------------
// Copyright 2022-2024 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Based on this: https://github.com/sebh/UnrealEngineSkyAtmosphere
//--------------------------------------------------------------------------------------------------

#ifndef ATMOSPHERE_GSL
#define ATMOSPHERE_GSL

#include "common/math.gsl"

#define TRANSMITTANCE_LUT_WIDTH 256
#define TRANSMITTANCE_LUT_HEIGHT 64

#define SCATTERING_LUT_R_SIZE 32
#define SCATTERING_LUT_MU_SIZE 128
#define SCATTERING_LUT_MU_S_SIZE 32
#define SCATTERING_LUT_NU_SIZE 8

#define IRRADIANCE_LUT_WIDTH 64
#define IRRADIANCE_LUT_HEIGHT 16

#define PLANET_RADIUS_OFFSET 0.01f

//--------------------------------------------------------------------------------------------------
struct AtmosphereParameters
{
	// Radius of the planet (center to ground)
	float bottomRadius;
	// Maximum considered atmosphere height (center to atmosphere top)
	float topRadius;

	// Rayleigh scattering exponential distribution scale in the atmosphere
	float rayleighDensityExpScale;
	// Rayleigh scattering coefficients
	float3 rayleighScattering;

	// Mie scattering exponential distribution scale in the atmosphere
	float mieDensityExpScale;
	// Mie scattering coefficients
	float3 mieScattering;
	// Mie extinction coefficients
	float3 mieExtinction;
	// Mie absorption coefficients
	float3 mieAbsorption;
	// Mie phase function excentricity
	float miePhaseG;

	// Another medium type in the atmosphere
	float absorptionDensity0LayerWidth;
	float absorptionDensity0ConstantTerm;
	float absorptionDensity0LinearTerm;
	float absorptionDensity1ConstantTerm;
	float absorptionDensity1LinearTerm;
	// This other medium only absorb light, e.g. useful to represent ozone in the earth atmosphere
	float3 absorptionExtinction;

	// The albedo of the ground.
	float3 groundAlbedo;
};

//--------------------------------------------------------------------------------------------------
float raySphereIntersectNearest(float3 r0, float3 rd, float3 s0, float sR)
{
	float a = dot(rd, rd);
	float3 s0r0 = r0 - s0;
	float b = 2.0f * dot(rd, s0r0);
	float c = dot(s0r0, s0r0) - (sR * sR);
	float delta = b * b - 4.0f * a * c;
	if (delta < 0.0f || a == 0.0f) return -1.0f;

	float sol0 = (-b - sqrt(delta)) / (2.0f * a);
	float sol1 = (-b + sqrt(delta)) / (2.0f * a);
	if (sol0 < 0.0f && sol1 < 0.0f) return -1.0f;

	if (sol0 < 0.0f) return max(0.0f, sol1);
	else if (sol1 < 0.0f) return max(0.0f, sol0);
	return max(0.0f, min(sol0, sol1));
}

float hgPhase(float g, float cosTheta) // CornetteShanksMiePhaseFunction
{
	float k = 3.0f / (8.0f * M_PI) * (1.0f - g * g) / (2.0f + g * g);
	return k * (1.0f + cosTheta * cosTheta) / pow(1.0f + g * g - 2.0f * g * -cosTheta, 1.5f);
}
float rayleighPhase(float cosTheta)
{
	float factor = 3.0f / (16.0f * M_PI);
	return factor * (1.0f + cosTheta * cosTheta);
}

float3 getMultipleScattering(AtmosphereParameters atmosphere,
	float3 scattering, float3 extinction, float3 worlPos, float viewZenithCosAngle)
{
	float2 uv = clamp(float2(viewZenithCosAngle * 0.5f + 0.5f, (length(worlPos) - atmosphere.bottomRadius) /
		(atmosphere.topRadius - atmosphere.bottomRadius)), 0.0f, 1.0f);
	uv = float2(fromUnitToSubUvs(uv.x, MultiScatteringLUTRes), fromUnitToSubUvs(uv.y, MultiScatteringLUTRes));
	return MultiScatTexture.SampleLevel(samplerLinearClamp, uv, 0).rgb;
}

//--------------------------------------------------------------------------------------------------
void uvToLutTransmittanceParams(AtmosphereParameters atmosphere,
	out float viewHeight, out float viewZenithCosAngle, float2 uv)
{
	float xMu = uv.x, xR = uv.y;

	float h = sqrt(atmosphere.topRadius * atmosphere.topRadius -
		atmosphere.bottomRadius * atmosphere.bottomRadius);
	float rho = h * xR;
	viewHeight = sqrt(rho * rho + atmosphere.bottomRadius * atmosphere.bottomRadius);

	float dMin = atmosphere.topRadius - viewHeight, dMax = rho + h;
	float d = dMin + xMu * (dMax - dMin);
	viewZenithCosAngle = d == 0.0f ? 1.0f : (h * h - rho * rho - d * d) / (2.0f * viewHeight * d);
	viewZenithCosAngle = clamp(viewZenithCosAngle, -1.0f, 1.0f);
}
void lutTransmittanceParamsToUv(AtmosphereParameters atmosphere,
	float viewHeight, float viewZenithCosAngle, out float2 uv)
{
	float h = sqrt(max(0.0f, atmosphere.topRadius * atmosphere.topRadius -
		atmosphere.bottomRadius * atmosphere.bottomRadius));
	float rho = sqrt(max(0.0f, viewHeight * viewHeight -
		atmosphere.bottomRadius * atmosphere.bottomRadius));

	float discriminant = viewHeight * viewHeight * (viewZenithCosAngle *
		viewZenithCosAngle - 1.0f) + atmosphere.topRadius * atmosphere.topRadius;
	// Distance to atmosphere boundary
	float d = max(0.0f, (-viewHeight * viewZenithCosAngle + sqrt(discriminant))); 

	float dMin = atmosphere.topRadius - viewHeight, dMax = rho + h;
	float xMu = (d - dMin) / (dMax - dMin), xR = rho / h;

	uv = float2(xMu, xR);
}

//--------------------------------------------------------------------------------------------------
struct MediumSampleRGB
{
	float3 scattering;
	float3 absorption;
	float3 extinction;

	float3 scatteringMie;
	float3 absorptionMie;
	float3 extinctionMie;

	float3 scatteringRay;
	float3 absorptionRay;
	float3 extinctionRay;

	float3 scatteringOzo;
	float3 absorptionOzo;
	float3 extinctionOzo;

	float3 albedo;
};

float getAlbedo(float scattering, float extinction)
{
	return scattering / max(0.001f, extinction);
}
float3 getAlbedo(float3 scattering, float3 extinction)
{
	return scattering / max(0.001f, extinction);
}

MediumSampleRGB sampleMediumRGB(float3 worldPos, AtmosphereParameters atmosphere)
{
	float viewHeight = length(worldPos) - atmosphere.bottomRadius;
	float densityMie = exp(atmosphere.mieDensityExpScale * viewHeight);
	float densityRay = exp(atmosphere.rayleighDensityExpScale * viewHeight);

	float densityOzo = clamp(viewHeight < atmosphere.absorptionDensity0LayerWidth ?
		atmosphere.absorptionDensity0LinearTerm * viewHeight +
			atmosphere.absorptionDensity0ConstantTerm :
		atmosphere.absorptionDensity1LinearTerm * viewHeight +
			atmosphere.absorptionDensity1ConstantTerm, 0.0f, 1.0f);

	MediumSampleRGB s;
	s.scatteringMie = densityMie * atmosphere.mieScattering;
	s.absorptionMie = densityMie * atmosphere.mieAbsorption;
	s.extinctionMie = densityMie * atmosphere.mieExtinction;

	s.scatteringRay = densityRay * atmosphere.rayleighScattering;
	s.absorptionRay = 0.0f;
	s.extinctionRay = s.scatteringRay + s.absorptionRay;

	s.scatteringOzo = 0.0f;
	s.absorptionOzo = densityOzo * atmosphere.absorptionExtinction;
	s.extinctionOzo = s.scatteringOzo + s.absorptionOzo;

	s.scattering = s.scatteringMie + s.scatteringRay + s.scatteringOzo;
	s.absorption = s.absorptionMie + s.absorptionRay + s.absorptionOzo;
	s.extinction = s.extinctionMie + s.extinctionRay + s.extinctionOzo;

	s.albedo = getAlbedo(s.scattering, s.extinction);
	return s;
}

//--------------------------------------------------------------------------------------------------
struct SingleScatteringResult
{
	float3 l;					 // Scattered light (luminance)
	float3 opticalDepth;		 // Optical depth (1/m)
	float3 transmittance;		 // Transmittance in [0,1] (unitless)
	float3 multiScatAs1;
	float3 newMultiScatStep0Out;
	float3 newMultiScatStep1Out;
};

// TODO: pass - gSkyInvViewProjMat

SingleScatteringResult integrateScatteredLuminance(float2 texCoords, float3 worldPos,
	float3 worldDir, float3 sunDir, AtmosphereParameters atmosphere, bool ground,
	float sampleCountIni, float depthBufferValue, bool variableSampleCount, bool mieRayPhase,
	float tMaxMax = 9000000.0f)
{
	SingleScatteringResult result = SingleScatteringResult(float3(0.0f),
		float3(0.0f), float3(0.0f), float3(0.0f), float3(0.0f), float3(0.0f));
	float3 clipSpace = float3(texCoords * float2(2.0f, -2.0f) - float2(1.0f, -1.0f), 1.0f);

	// Compute next intersection with atmosphere or ground 
	float3 earthO = float3(0.0f, 0.0f, 0.0f);
	float tBottom = raySphereIntersectNearest(worldPos, worldDir, earthO, atmosphere.bottomRadius);
	float tTop = raySphereIntersectNearest(worldPos, worldDir, earthO, atmosphere.topRadius);

	float tMax = 0.0f;
	if (tBottom < 0.0f)
	{
		if (tTop < 0.0f)
		{
			tMax = 0.0f; // No intersection with earth nor atmosphere: stop right away  
			return result;
		}
		else tMax = tTop;
	}
	else
	{
		if (tTop > 0.0f) tMax = min(tTop, tBottom);
	}

	if (depthBufferValue >= 0.0f)
	{
		clipSpace.z = depthBufferValue;
		if (clipSpace.z < 1.0f)
		{
			float4 depthBufferWorldPos = mul(gSkyInvViewProjMat, float4(clipSpace, 1.0f));
			depthBufferWorldPos /= depthBufferWorldPos.w;

			// Apply earth offset to go back to origin as top of earth mode. 
			float tDepth = length(fepthBufferWorldPos.xyz -
				(worldPos + float3(0.0f, 0.0f, -atmosphere.bottomRadius)));
			if (tDepth < tMax) tMax = tDepth;
		}
	}
	tMax = min(tMax, tMaxMax);

	float sampleCount = sampleCountIni, sampleCountFloor = sampleCountIni;
	float tMaxFloor = tMax;
	if (variableSampleCount)
	{
		sampleCount = lerp(RAY_MARCH_MIN_SPP, RAY_MARCH_MAX_SPP,
			clamp(tMax * 0.01f, 0.0f, 1.0f));
		sampleCountFloor = floor(sampleCount);

		// Rescale tMax to map to the last entire step segment.
		tMaxFloor = tMax * sampleCountFloor / sampleCount; 
	}
	float dt = tMax / sampleCount;

	// Phase functions
	const float uniformPhase = 1.0f / (4.0f * M_PI);
	float3 wi = sunDir, wo = worldDir;
	float cosTheta = dot(wi, wo);

	// Negate cosTheta because due to WorldDir being a "in" direction. 
	float miePhaseValue = hgPhase(atmosphere.miePhaseG, -cosTheta);	
	float rayleighPhaseValue = rayleighPhase(cosTheta);

	// When building the scattering factor, we assume light illuminance is 1
	// to compute a transfert function relative to identity illuminance of 1.
	// This make the scattering factor independent of the light.
	// It is now only linked to the atmosphere properties.
	const float3 globalL = 1.0f;

	// Ray march the atmosphere to integrate optical depth
	float3 l = 0.0f;
	float3 throughput = 1.0f;
	float3 opticalDepth = 0.0f;
	float t = 0.0f;
	float tPrev = 0.0f;
	const float sampleSegmentT = 0.3f;

	for (float s = 0.0f; s < sampleCount; s += 1.0f)
	{
		if (variableSampleCount)
		{
			// More expenssive but artefact free
			float t0 = (s) / sampleCountFloor;
			float t1 = (s + 1.0f) / sampleCountFloor;
			// Non linear distribution of sample within the range.
			t0 = t0 * t0; t1 = t1 * t1;
			// Make t0 and t1 world space distances.
			t0 = tMaxFloor * t0;
			if (t1 > 1.0f) t1 = tMax;
			else t1 = tMaxFloor * t1;
			t = t0 + (t1 - t0) * sampleSegmentT;
			dt = t1 - t0;
		}
		else
		{
			// Exact difference, important for accuracy of multiple scattering
			float newT = tMax * (s + sampleSegmentT) / sampleCount;
			dt = newT - t; t = newT;
		}

		float3 p = worldPos + t * worldDir;
		MediumSampleRGB medium = sampleMediumRGB(p, atmosphere);
		float3 sampleOpticalDepth = medium.extinction * dt;
		float3 sampleTransmittance = exp(-sampleOpticalDepth);
		opticalDepth += sampleOpticalDepth;

		float pHeight = length(p);
		float3 upVector = p / pHeight;
		float sunZenithCosAngle = dot(sunDir, upVector);

		float2 uv;
		lutTransmittanceParamsToUv(atmosphere, pHeight, sunZenithCosAngle, uv);
		float3 transmittanceToSun = TransmittanceLutTexture.SampleLevel(samplerLinearClamp, uv, 0).rgb;

		float3 phaseTimesScattering;
		if (mieRayPhase)
		{
			phaseTimesScattering = medium.scatteringMie * miePhaseValue +
				medium.scatteringRay * rayleighPhaseValue;
		}
		else phaseTimesScattering = medium.scattering * uniformPhase;

		// Earth shadow 
		float tEarth = raySphereIntersectNearest(p, sunDir, 
			earthO + PLANET_RADIUS_OFFSET * upVector, atmosphere.bottomRadius);
		float earthShadow = tEarth >= 0.0f ? 0.0f : 1.0f;

		// Dual scattering for multi scattering 
		float3 multiScatteredLuminance = 0.0f;
		#if MULTISCATAPPROX_ENABLED
		multiScatteredLuminance = getMultipleScattering(atmosphere,
			medium.scattering, medium.extinction, p, sunZenithCosAngle);
		#endif

		float shadow = 1.0f;
		#if SHADOWMAP_ENABLED // TODO: support shadows
		// First evaluate opaque shadow
		shadow = getShadow(atmosphere, p);
		#endif

		float3 s = globalL * (earthShadow * shadow * transmittanceToSun * 
			phaseTimesScattering + multiScatteredLuminance * medium.scattering);

		// When using the power serie to accumulate all sattering order, serie r must be <1 for a serie to converge.
		// Under extreme coefficient, multiScatAs1 can grow larger and thus result in broken visuals.
		// The way to fix that is to use a proper analytical integration as proposed in slide 28 of
		// http://www.frostbite.com/2015/08/physically-based-unified-volumetric-rendering-in-frostbite/
		// However, it is possible to disable as it can also work using simple power serie sum unroll up to 5th order.
		// The rest of the orders has a really low contribution.
		#define MULTI_SCATTERING_POWER_SERIE 1

		#if MULTI_SCATTERING_POWER_SERIE == 0
		// 1 is the integration of luminance over the 4pi of a sphere,
		// and assuming an isotropic phase function of 1.0 / (4 * PI)
		result.multiScatAs1 += throughput * medium.scattering * 1 * dt;
		#else
		float3 ms = medium.scattering * 1;
		float3 msInt = (ms - ms * sampleTransmittance) / medium.extinction;
		result.multiScatAs1 += throughput * msInt;
		#endif

		// Evaluate input to multi scattering 
		{
			float3 newMS;

			newMS = earthShadow * transmittanceToSun * medium.scattering * uniformPhase * 1;
			result.newMultiScatStep0Out += throughput *
				(newMS - newMS * sampleTransmittance) / medium.extinction;

			newMS = medium.scattering * uniformPhase * multiScatteredLuminance;
			result.newMultiScatStep1Out += throughput * 
				(newMS - newMS * sampleTransmittance) / medium.extinction;
		}

		// See slide 28 at http://www.frostbite.com/2015/08/physically-based-unified-volumetric-rendering-in-frostbite/ 
		float3 sInt = (s - s * sampleTransmittance) / medium.extinction; // Integrate along the current step segment.
		L += throughput * sInt; // Accumulate and also take into account the transmittance from previous steps.
		throughput *= sampleTransmittance;

		tPrev = t;
	}

	if (ground && tMax == tBottom && tBottom > 0.0f)
	{
		// Account for bounced light off the earth
		float3 p = worldPos + tBottom * worldDir;
		float pHeight = length(p);

		float3 upVector = p / pHeight;
		float sunZenithCosAngle = dot(sunDir, upVector);

		float2 uv;
		lutTransmittanceParamsToUv(atmosphere, pHeight, sunZenithCosAngle, uv);
		float3 transmittanceToSun = TransmittanceLutTexture.SampleLevel(samplerLinearClamp, uv, 0).rgb;

		float nol = clmap(dot(normalize(upVector), normalize(sunDir)), 0.0f, 1.0f);
		l += globalL * transmittanceToSun * throughput * nol * atmosphere.groundAlbedo / M_PI;
	}

	result.l = l;
	result.opticalDepth = opticalDepth;
	result.transmittance = throughput;
	return result;
}

#endif // ATMOSPHERE_GSL