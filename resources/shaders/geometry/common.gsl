//--------------------------------------------------------------------------------------------------
// Copyright 2022-2023 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//--------------------------------------------------------------------------------------------------

#ifndef GEOMETRY_GSL
#define GEOMETRY_GSL

struct InstanceData
{
	float4x4 model;
	float4x4 mvp;
};

float3 calcNormal(float4x4 matrix, float3 vector)
{
	return normalize(float3x3(matrix) * vector);
}
float3 calcNormal(float3x4 matrix, float3 vector)
{
	return normalize(float3x3(matrix) * vector);
}

float3x3 calcTBN(float4x4 model, float4 tangent, float3 normal)
{
	float3 bitangent = cross(normal, tangent.xyz) * -tangent.w;
	float3 t = normalize(float3(model * float4(tangent.xyz, 0.0f)));
	float3 b = normalize(float3(model * float4(bitangent, 0.0f)));
	float3 n = normalize(float3(model * float4(normal, 0.0f)));
	return float3x3(t, b, n);
}
float3x3 calcGramSchmidtTBN(float4x4 model, float3 tangent, float3 normal)
{
	float3 t = normalize(float3(model * float4(tangent, 0.0f)));
	float3 n = normalize(float3(model * float4(normal, 0.0f)));
	t = normalize(t - dot(t, n) * n); // Re-orthogonalize T with respect to N
	float3 b = cross(n, t) * tangent;
	return float3x3(t, b, n);
}

#endif // GEOMETRY_GSL