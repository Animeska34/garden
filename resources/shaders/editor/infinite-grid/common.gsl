// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef INFINITE_GRID_GSL
#define INFINITE_GRID_GSL

float intersectGrid(float3 nearPoint, float3 farPoint, bool isHorizontal)
{
	return isHorizontal ? -nearPoint.y / (farPoint.y - nearPoint.y) : 
		-nearPoint.z / (farPoint.z - nearPoint.z);
}
float3 calcFragPos(float3 nearPoint, float3 farPoint, float t)
{
	return t * (farPoint - nearPoint) + nearPoint;
}
float4 calcGrid(float3 fragPos, float3 meshColor, float3 axisColorX, 
	float3 axisColorYZ, float meshScale, bool isHorizontal)
{
	float2 coords = (isHorizontal ? fragPos.xz : fragPos.xy) * meshScale;
	float2 derivative = fwidth(coords);
	float2 grid = abs(fract(coords - 0.5f) - 0.5f) / derivative;
	float line = min(grid.x, grid.y);
	float2 derMin = min(derivative, float2(1.0f));
	float4 color = float4(meshColor, 1.0f - min(line, 1.0f));
	float scale = 1.0f / meshScale;

	if (fragPos.x > -scale * derMin.x && fragPos.x < scale * derMin.x)
		color.rgb = axisColorX;

	if (isHorizontal)
	{
		if (fragPos.z > -scale * derMin.y && fragPos.z < scale * derMin.y)
			color.rgb = axisColorYZ;
	}
	else
	{
		if (fragPos.y > -scale * derMin.y && fragPos.y < scale * derMin.y)
			color.rgb = axisColorYZ;
	}
	return color;
}

#endif // INFINITE_GRID_GSL