// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef TONE_MAPPING_GSL
#define TONE_MAPPING_GSL

#define DEFAULT_GAMMA 2.2f
#define LUM_TO_EXP 9.6f

float3 gammaCorrection(float3 color, float invGamma)
{
	return pow(color, float3(invGamma));
}
float3 gammaCorrection(float3 color)
{
	return pow(color, float3(1.0f / DEFAULT_GAMMA));
}
float3 gammaCorrectionPrecise(float3 color)
{
	float3 lo = color * 12.92f;
	float3 hi = (pow(abs(color), float3(1.0f / 2.4f)) * 1.055f) - 0.055f;
	return mix(hi, lo, float3(lessThanEqual(color, float3(0.0031308f))));
}

float rgbToLum(float3 rgb)
{
	return dot(rgb, float3(0.2126f, 0.7152f, 0.0722f));
}
float rgbToLuma(float3 rgb)
{
	return rgbToLum(gammaCorrection(rgb));
}

// Narkowicz 2015, "ACES Filmic Tone Mapping Curve"
float3 aces(float3 x)
{
	const float a = 2.51f, b = 0.03f, c = 2.43f, d = 0.59f, e = 0.14f;
	return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0f, 1.0f);
}

//**********************************************************************************************************************
// Uchimura 2017, "HDR theory and practice"
float3 uchimura(float3 x, float p, float a, float m, float l, float c, float b)
{
	float l0 = ((p - m) * l) / a;
	float s0 = m + l0;
	float s1 = m + a * l0;
	float c2 = (a * p) / (p - s1);
	float cp = -c2 / p;
	float3 w0 = 1.0f - smoothstep(float3(0.0f), float3(m), x);
	float3 w2 = step(float3(m + l0), x);
	float3 w1 = 1.0f - w0 - w2;
	float3 t = m * pow(x / m, float3(c)) + b;
	float3 s = p - (p - s1) * exp(cp * (x - s0));
	float3 u = m + a * (x - m);
	return t * w0 + u * w1 + s * w2;
}
float3 uchimura(float3 x)
{
	const float p = 1.0f;  // max display brightness
	const float a = 1.0f;  // contrast
	const float m = 0.22f; // linear section start
	const float l = 0.4f;  // linear section length
	const float c = 1.33f; // black
	const float b = 0.0f;  // pedestal
	return uchimura(x, p, a, m, l, c, b);
}

#endif // TONE_MAPPING_GSL