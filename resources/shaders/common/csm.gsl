// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Cascade Shadow Mapping

#ifndef CSM_GSL
#define CSM_GSL

#include "common/math.gsl"
#include "common/random.gsl"

#define SHADOW_MAP_MAX_CASCADE_COUNT 4
#define SHADOW_MAP_SAMPLE_COUNT 8

#define SHADOW_MAP_DATA                            \
	float4x4 lightSpace[SHADOW_MAP_CASCADE_COUNT]; \
	float4 farPlanes;                              \
	float4 lightDirBias;

const float2 poissonDisk[SHADOW_MAP_SAMPLE_COUNT] = float2[]
(
	float2(-0.326f, -0.406f),
	float2(-0.840f, -0.074f),
	float2(-0.696f,  0.457f),
	float2(-0.203f,  0.621f),
	float2( 0.962f, -0.195f),
	float2( 0.473f, -0.480f),
	float2( 0.519f,  0.767f),
	float2( 0.185f, -0.893f)
);

//**********************************************************************************************************************
void computeCsmData(float4x4 lightSpace[SHADOW_MAP_CASCADE_COUNT], float2 texCoords, float pixelDepth, 
	float3 farPlanes, float3 lightDir, float bias, float3 normal, out uint32 cascadeID, out float3 lightCoords)
{
	if (SHADOW_MAP_CASCADE_COUNT == 4) // Tuned for maximum 4 cascades
	{
		float3 steps = step(farPlanes, float3(pixelDepth));
		cascadeID = (SHADOW_MAP_CASCADE_COUNT - 1) - uint32(steps.x + steps.y + steps.z);
	}
	else if (SHADOW_MAP_CASCADE_COUNT == 3)
	{
		float2 steps = step(farPlanes.xy, float2(pixelDepth));
		cascadeID = (SHADOW_MAP_CASCADE_COUNT - 1) - uint32(steps.x + steps.y);
	}
	else if (SHADOW_MAP_CASCADE_COUNT == 2)
	{
		float steps = step(farPlanes.x, pixelDepth);
		cascadeID = (SHADOW_MAP_CASCADE_COUNT - 1) - uint32(steps);
	}
	else
	{
		cascadeID = 0;
	}
	
	float4 lightProj = lightSpace[cascadeID] * float4(texCoords, pixelDepth, 1.0f);
	lightCoords = lightProj.xyz / lightProj.w;
	lightCoords.z += (1.0f - dot(normal, lightDir)) * bias;
}

//**********************************************************************************************************************
float2x2 calcRandomShadowRot(float2 lightCoords)
{
	float angle = toFloat01(iqint(lightCoords)) * (M_PI * 2.0f);
	return float2x2(cos(angle), -sin(angle), sin(angle), cos(angle));
}

float evaluateCsmShadows(sampler2DArrayShadow depthMap, uint32 cascadeID, float3 lightCoords)
{
	if (lightCoords.z < 0.0f)
		return 0.0f;

	float2x2 rotation = calcRandomShadowRot(lightCoords.xy);
	float2 texelSize = 3.0f / textureSize(depthMap, 0).xy; // Bigger texel size - x3.
	float shadow = 0.0f;

	for (int32 i = 0; i < SHADOW_MAP_SAMPLE_COUNT; i++)
	{
		float2 texCoords = rotation * poissonDisk[i] * texelSize + lightCoords.xy;
		shadow += texture(depthMap, float4(texCoords, cascadeID, lightCoords.z));
	}

	return 1.0f - shadow * (1.0f / SHADOW_MAP_SAMPLE_COUNT);
}
float4 evaluateCsmTransparency(sampler2DArray transparentMap, uint32 cascadeID, float3 lightCoords)
{
	if (lightCoords.z < 0.0f)
		return float4(1.0f);

	float2x2 rotation = calcRandomShadowRot(lightCoords.xy);
	float2 texelSize = 3.0f / textureSize(transparentMap, 0).xy; // Bigger texel size - x3.
	float4 transparency = float4(0.0f);

	for (int32 i = 0; i < SHADOW_MAP_SAMPLE_COUNT; i++)
	{
		float2 texCoords = rotation * poissonDisk[i] * texelSize + lightCoords.xy;
		transparency += textureLod(transparentMap, float3(texCoords, cascadeID), 0.0f);
	}

	return transparency * (1.0f / SHADOW_MAP_SAMPLE_COUNT);
}

#endif // CSM_GSL