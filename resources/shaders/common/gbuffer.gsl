// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// TODO: add sheen G-Buffer?

#ifndef GBUFFER_GSL
#define GBUFFER_GSL

#include "common/math.gsl"

#define BASE_COLOR_G_BUFFER 0
#define SPECULAR_FACTOR_G_BUFFER 0
#define METALLIC_G_BUFFER 1
#define ROUGHNESS_G_BUFFER 1
#define AO_G_BUFFER 1
#define REFLECTANCE_G_BUFFER 1
#define CC_NORMALS_G_BUFFER 2
#define CC_ROUGHNESS_G_BUFFER 2
#define NORMALS_G_BUFFER 3
#define SHADOW_G_BUFFER 3
#define EM_COLOR_G_BUFFER 4
#define EM_FACTOR_G_BUFFER 4
#define GI_G_BUFFER 5
#define G_BUFFER_COUNT 6

struct GBufferData
{
	float4 g[G_BUFFER_COUNT];
};
struct GBufferValues
{
	float3 baseColor;
	float specularFactor;
	float metallic;
	float roughness;
	float ambientOcclusion;
	float reflectance;
	float3 absorptionColor;
	float transmission;
	float3 clearCoatNormal;
	float clearCoatRoughness;
	float3 normal;
	float shadow;
	float3 emissiveColor;
	float emissiveFactor;
	float3 subsurfaceColor;
	float thickness;
	float3 refractedColor;
	float3 giColor;
};

GBufferValues gBufferValuesDefault()
{
	GBufferValues values;
	values.baseColor = float3(1.0f);
	values.specularFactor = 1.0f;
	values.metallic = 0.0f;
	values.roughness = 1.0f;
	values.ambientOcclusion = 1.0f;
	values.reflectance = 0.5f;
	values.absorptionColor = float3(1.0f);
	values.transmission = 0.0f;
	values.clearCoatNormal = float3(0.0f, 0.0f, 1.0f);
	values.clearCoatRoughness = 0.0f;
	values.normal = float3(0.0f, 1.0f, 0.0f);
	values.shadow = 1.0f;
	values.emissiveColor = float3(0.0f);
	values.emissiveFactor = 0.0f;
	values.subsurfaceColor = float3(0.0f);
	values.thickness = 1.0f;
	values.refractedColor = float3(0.0f);
	values.giColor = float3(1.0f);
	return values;
}

//**********************************************************************************************************************
// Signed Octahedron Normal Encoding (R10G10B10A2)
// https://johnwhite3d.blogspot.com/2017/10/signed-octahedron-normal-encoding.html

float3 encodeNormalOct(float3 normal)
{
	float3 encoded;
	normal /= (abs(normal.x) + abs(normal.y) + abs(normal.z));
	encoded.y = normal.y *  0.5f + 0.5f;
	encoded.x = normal.x *  0.5f + encoded.y;
	encoded.y = normal.x * -0.5f + encoded.y;
	encoded.z = clamp(normal.z * FLOAT32_MAX, 0.0f, 1.0f);
	return encoded;
}
float3 decodeNormalOct(float3 encoded)
{
	float3 normal;
	normal.x = (encoded.x - encoded.y);
	normal.y = (encoded.x + encoded.y) - 1.0f;
	normal.z = encoded.z * 2.0f - 1.0f;
	normal.z = normal.z * (1.0f - abs(normal.x) - abs(normal.y));
	return normalize(normal);
}

//**********************************************************************************************************************
float4 encodeGBuffer0(float3 baseColor, float specularFactor)
{
	return float4(baseColor, specularFactor);
}
float4 encodeGBuffer1(float metallic, float roughness, float ambientOcclusion, float reflectance)
{
	return float4(metallic, roughness, ambientOcclusion, reflectance);
}
float4 encodeGBuffer2(float3 clearCoatNormal, float clearCoatRoughness)
{
	float3 encodedNormal = encodeNormalOct(clearCoatNormal);
	return float4(clearCoatRoughness, encodedNormal.x, encodedNormal.y, encodedNormal.z);
}
float4 encodeGBuffer3(float3 normal, float shadow)
{
	float3 encodedNormal = encodeNormalOct(normal);
	return float4(shadow, encodedNormal.x, encodedNormal.y, encodedNormal.z);
}
float4 encodeGBuffer4(float3 emissiveColor, float emissiveFactor)
{
	return float4(emissiveColor, emissiveFactor);
}
float4 encodeGBuffer5(float3 giColor)
{
	return float4(giColor, 0.0f);
}

void encodeGBufferValues(const GBufferValues values, out float4 g0, out float4 g1, 
	out float4 g2, out float4 g3, out float4 g4, out float4 g5)
{
	g0 = encodeGBuffer0(values.baseColor, values.specularFactor);
	g1 = encodeGBuffer1(values.metallic, values.roughness, values.ambientOcclusion, values.reflectance);
	g2 = encodeGBuffer2(values.clearCoatNormal, values.clearCoatRoughness);
	g3 = encodeGBuffer3(values.normal, values.shadow);

	if (USE_EMISSIVE_BUFFER)
		g4 = encodeGBuffer4(values.emissiveColor, values.emissiveFactor);
	if (USE_GI_BUFFER)
		g5 = encodeGBuffer5(values.giColor);
}

#define ENCODE_G_BUFFER_VALUES(values) encodeGBufferValues(values, fb_g0, fb_g1, fb_g2, fb_g3, fb_g4, fb_g5)

//**********************************************************************************************************************
float3 decodeBaseColor(float4 gBufferData) { return gBufferData.rgb; }
float decodeSpecularFactor(float4 gBufferData) { return gBufferData.a; }
float decodeMetallic(float4 gBufferData) { return gBufferData.r; }
float decodeRoughness(float4 gBufferData) { return gBufferData.g; }
float decodeAmbientOcclusion(float4 gBufferData) { return gBufferData.b; }
float decodeReflectance(float4 gBufferData) { return gBufferData.a; }
float3 decodeClearCoatNormal(float4 gBufferData) { return decodeNormalOct(gBufferData.gba); }
float decodeClearCoatRoughness(float4 gBufferData) { return gBufferData.r; }
float3 decodeNormal(float4 gBufferData) { return decodeNormalOct(gBufferData.gba); }
float decodeShadow(float4 gBufferData) { return gBufferData.r; }
float3 decodeEmissiveColor(float4 gBufferData) { return gBufferData.rgb; }
float decodeEmissiveFactor(float4 gBufferData) { return gBufferData.a; }
float3 decodeGiColor(float4 gBufferData) { return gBufferData.rgb; }

float3 decodeBaseColor(const GBufferData data) { return decodeBaseColor(data.g[BASE_COLOR_G_BUFFER]); }
float decodeSpecularFactor(const GBufferData data) { return decodeSpecularFactor(data.g[SPECULAR_FACTOR_G_BUFFER]); }
float decodeMetallic(const GBufferData data) { return decodeMetallic(data.g[METALLIC_G_BUFFER]); }
float decodeRoughness(const GBufferData data) { return decodeRoughness(data.g[ROUGHNESS_G_BUFFER]); }
float decodeAmbientOcclusion(const GBufferData data) { return decodeAmbientOcclusion(data.g[AO_G_BUFFER]); }
float decodeReflectance(const GBufferData data) { return decodeReflectance(data.g[REFLECTANCE_G_BUFFER]); }
float3 decodeClearCoatNormal(const GBufferData data) { return decodeClearCoatNormal(data.g[CC_NORMALS_G_BUFFER]); }
float decodeClearCoatRoughness(const GBufferData data) { return decodeClearCoatRoughness(data.g[CC_ROUGHNESS_G_BUFFER]); }
float3 decodeNormal(const GBufferData data) { return decodeNormal(data.g[NORMALS_G_BUFFER]); }
float decodeShadow(const GBufferData data) { return decodeShadow(data.g[SHADOW_G_BUFFER]); }
float3 decodeEmissiveColor(const GBufferData data) { return decodeEmissiveColor(data.g[EM_COLOR_G_BUFFER]); }
float decodeEmissiveFactor(const GBufferData data) { return decodeEmissiveFactor(data.g[EM_FACTOR_G_BUFFER]); }
float3 decodeGiColor(const GBufferData data) { return decodeGiColor(data.g[GI_G_BUFFER]); }

//**********************************************************************************************************************
GBufferData decodeGBufferData(sampler2D s0, sampler2D s1, sampler2D s2, 
	sampler2D s3, sampler2D s4, sampler2D s5, float2 texCoords)
{
	GBufferData data;
	data.g[0] = texture(s0, texCoords);
	data.g[1] = texture(s1, texCoords);
	data.g[2] = texture(s2, texCoords);
	data.g[3] = texture(s3, texCoords);
	if (USE_EMISSIVE_BUFFER)
		data.g[4] = texture(s4, texCoords);
	if (USE_GI_BUFFER)
		data.g[5] = texture(s5, texCoords);
	return data;
}
GBufferValues decodeGBufferValues(sampler2D s0, sampler2D s1, sampler2D s2, 
	sampler2D s3, sampler2D s4, sampler2D s5, float2 texCoords)
{
	GBufferData data = decodeGBufferData(s0, s1, s2, s3, s4, s5, texCoords);

	GBufferValues values;
	values.baseColor = decodeBaseColor(data);
	values.specularFactor = decodeSpecularFactor(data);
	values.metallic = decodeMetallic(data);
	values.roughness = decodeRoughness(data);
	values.ambientOcclusion = decodeAmbientOcclusion(data);
	values.reflectance = decodeReflectance(data);
	values.absorptionColor = values.baseColor;
	values.clearCoatNormal = decodeClearCoatNormal(data);
	values.clearCoatRoughness = decodeClearCoatRoughness(data);
	values.normal = decodeNormal(data);
	values.shadow = decodeShadow(data);

	if (USE_EMISSIVE_BUFFER)
	{
		values.emissiveColor = decodeEmissiveColor(data);
		values.emissiveFactor = decodeEmissiveFactor(data);
	}

	if (USE_GI_BUFFER)
		values.giColor = decodeGiColor(data);

	values.transmission = 0.0f;
	values.refractedColor = float3(0.0f);
	return values;
}

#define DECODE_G_BUFFER_DATA(texCoords) decodeGBufferData(g0, g1, g2, g3, g4, g5, texCoords)
#define DECODE_G_BUFFER_VALUES(texCoords) decodeGBufferValues(g0, g1, g2, g3, g4, g5, texCoords)

#endif // GBUFFER_GSL