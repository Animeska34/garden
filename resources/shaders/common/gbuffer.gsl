// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef GBUFFER_GSL
#define GBUFFER_GSL

// TODO: add sheen G-Buffer?

#include "common/math.gsl"

#define G_BUFFER_COUNT 5

#define BASE_COLOR_G_BUFFER 0
#define OPACITY_G_BUFFER 0
#define METALLIC_G_BUFFER 1
#define ROUGHNESS_G_BUFFER 1
#define AO_G_BUFFER 1
#define REFLECTANCE_G_BUFFER 1
#define NORMALS_G_BUFFER 2
#define CLEAR_COAT_G_BUFFER 2
#define EM_COLOR_G_BUFFER 3
#define EM_FACTOR_G_BUFFER 3
#define SUBSURFACE_G_BUFFER 4
#define THICKNESS_G_BUFFER 4

struct GBufferData
{
	float4 g[G_BUFFER_COUNT];
};
struct GBufferValues
{
	float4 baseColor;
	float metallic;
	float roughness;
	float ambientOcclusion;
	float reflectance;
	float3 normal;
	float clearCoat;
	float3 emissiveColor;
	float emissiveFactor;
	float3 subsurfaceColor;
	float thickness;
};

//**********************************************************************************************************************
// Signed Octahedron Normal Encoding (R10G10B10A2)
// https://johnwhite3d.blogspot.com/2017/10/signed-octahedron-normal-encoding.html

float3 encodeNormalOct(float3 normal)
{
	float3 encoded;
	normal /= (abs(normal.x) + abs(normal.y) + abs(normal.z));
	encoded.y = normal.y *  0.5f + 0.5f;
	encoded.x = normal.x *  0.5f + encoded.y;
	encoded.y = normal.x * -0.5f + encoded.y;
	encoded.z = clamp(normal.z * FLOAT32_MAX, 0.0f, 1.0f);
	return encoded;
}
float3 decodeNormalOct(float3 encoded)
{
	float3 normal;
	normal.x = (encoded.x - encoded.y);
	normal.y = (encoded.x + encoded.y) - 1.0f;
	normal.z = encoded.z * 2.0f - 1.0f;
	normal.z = normal.z * (1.0f - abs(normal.x) - abs(normal.y));
	return normalize(normal);
}

//**********************************************************************************************************************
float4 encodeGBuffer0(float4 baseColor)
{
	return baseColor;
}
float4 encodeGBuffer1(float metallic, float roughness, float ambientOcclusion, float reflectance)
{
	return float4(metallic, roughness, ambientOcclusion, reflectance);
}
float4 encodeGBuffer2(float3 normal, float clearCoat)
{
	float3 encodedNormal = encodeNormalOct(normal);
	return float4(clearCoat, encodedNormal.x, encodedNormal.y, encodedNormal.z);
}
float4 encodeGBuffer3(float3 emissiveColor, float emissiveFactor)
{
	return float4(emissiveColor, emissiveFactor);
}
float4 encodeGBuffer4(float3 subsurfaceColor, float thickness)
{
	return float4(subsurfaceColor, thickness);
}

void encodeGBufferValues(GBufferValues values, out float4 g0, out float4 g1, out float4 g2, out float4 g3, out float4 g4)
{
	g0 = encodeGBuffer0(values.baseColor);
	g1 = encodeGBuffer1(values.metallic, values.roughness, values.ambientOcclusion, values.reflectance);
	g2 = encodeGBuffer2(values.normal, values.clearCoat);
	g3 = encodeGBuffer3(values.emissiveColor, values.emissiveFactor);
	g4 = encodeGBuffer4(values.subsurfaceColor, values.thickness);
}

//**********************************************************************************************************************
GBufferData decodeGBufferData(sampler2D s0, sampler2D s1, sampler2D s2, sampler2D s3, sampler2D s4, float2 texCoords)
{
	GBufferData data;
	data.g[0] = texture(s0, texCoords);
	data.g[1] = texture(s1, texCoords);
	data.g[2] = texture(s2, texCoords);
	data.g[3] = texture(s3, texCoords);
	data.g[4] = texture(s4, texCoords);
	return data;
}

float4 decodeBaseColor(GBufferData data) { return data.g[BASE_COLOR_G_BUFFER]; }
float decodeMetallic(GBufferData data) { return data.g[METALLIC_G_BUFFER].r; }
float decodeRoughness(GBufferData data) { return data.g[ROUGHNESS_G_BUFFER].g; }
float decodeAmbientOcclusion(GBufferData data) { return data.g[AO_G_BUFFER].b; }
float decodeReflectance(GBufferData data) { return data.g[REFLECTANCE_G_BUFFER].a; }
float3 decodeNormal(GBufferData data) { return decodeNormalOct(data.g[NORMALS_G_BUFFER].gba); }
float decodeClearCoat(GBufferData data) { return data.g[CLEAR_COAT_G_BUFFER].r; }
float3 decodeEmissiveColor(GBufferData data) { return data.g[EM_COLOR_G_BUFFER].rgb; }
float decodeEmissiveFactor(GBufferData data) { return data.g[EM_FACTOR_G_BUFFER].a; }
float3 decodeSubsurfaceColor(GBufferData data) { return data.g[SUBSURFACE_G_BUFFER].rgb; }
float decodeThickness(GBufferData data) { return data.g[THICKNESS_G_BUFFER].a; }

GBufferValues decodeGBufferValues(sampler2D s0, sampler2D s1, sampler2D s2, sampler2D s3, sampler2D s4, float2 texCoords)
{
	GBufferData data = decodeGBufferData(s0, s1, s2, s3, s4, texCoords);

	GBufferValues values;
	values.baseColor = decodeBaseColor(data);
	values.metallic = decodeMetallic(data);
	values.roughness = decodeRoughness(data);
	values.ambientOcclusion = decodeAmbientOcclusion(data);
	values.reflectance = decodeReflectance(data);
	values.normal = decodeNormal(data);
	values.clearCoat = decodeClearCoat(data);
	values.emissiveColor = decodeEmissiveColor(data);
	values.emissiveFactor = decodeEmissiveFactor(data);
	values.subsurfaceColor = decodeSubsurfaceColor(data);
	values.thickness = decodeThickness(data);
	return values;
}

#endif // GBUFFER_GSL