//--------------------------------------------------------------------------------------------------
// Copyright 2022-2023 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//--------------------------------------------------------------------------------------------------

#ifndef PROCESS_GSL
#define PROCESS_GSL

float4 downsampleCubic(sampler2D image, int2 coords, int32 lod)
{
	float4 s0 = texelFetch(image, coords + int2(0, 0), lod);
	float4 s1 = texelFetch(image, coords + int2(1, 0), lod);
	float4 s2 = texelFetch(image, coords + int2(0, 1), lod);
	float4 s3 = texelFetch(image, coords + int2(1, 1), lod);
	return (s0 + s1 + s2 + s3) * (1.0f / 4.0f);
}
float4 downsampleCubic(sampler2DArray image, int3 coords, int32 lod)
{
	float4 s0 = texelFetch(image, coords + int3(0, 0, 0), lod);
	float4 s1 = texelFetch(image, coords + int3(1, 0, 0), lod);
	float4 s2 = texelFetch(image, coords + int3(0, 1, 0), lod);
	float4 s3 = texelFetch(image, coords + int3(1, 1, 0), lod);
	return (s0 + s1 + s2 + s3) * (1.0f / 4.0f);
}
float4 downsampleCubic(sampler3D image, int3 coords, int32 lod)
{
	float4 s0 = texelFetch(image, coords + int3(0, 0, 0), lod);
	float4 s1 = texelFetch(image, coords + int3(1, 0, 0), lod);
	float4 s2 = texelFetch(image, coords + int3(0, 1, 0), lod);
	float4 s3 = texelFetch(image, coords + int3(1, 1, 0), lod);
	return (s0 + s1 + s2 + s3) * (1.0f / 4.0f);
}

#endif // PROCESS_GSL