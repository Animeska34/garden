// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef RAY_GSL
#define RAY_GSL

#include "common/math.gsl"

struct Ray
{
	float3 origin;
	float3 direction;
};

struct ConeRay
{
	float width;
	float halfAngle;
};

void propagateConeRay(inout ConeRay coneRay, float surfaceHalfAngle, float distance)
{
	coneRay.width = fma(coneRay.halfAngle, distance, coneRay.width);
	coneRay.halfAngle = coneRay.halfAngle + surfaceHalfAngle;
}

float calcConeRayCapArea(ConeRay coneRay)
{
	return coneRay.width * coneRay.width * (1.0f / (M_PI * 2.0f));
}
float calcConeRayTexArea(ConeRay coneRay, float3 rayDir, float3 normal, float uvWorldArea)
{
	float capArea = calcConeRayCapArea(coneRay); float raySlope = dot(rayDir, normal);
	return max((uvWorldArea * capArea) / max(raySlope * raySlope, FLOAT_SMALL), FLOAT_SMALL);
}

float calcConeRayLod(float coneRayTexArea, int2 textureSize)
{
	int32 textureArea = textureSize.x * textureSize.y;
	return log2(textureArea * coneRayTexArea) * 0.5f;
}
float calcConeRayLod(ConeRay coneRay, float3 rayDir, float3 normal, float uvWorldArea, int2 textureSize)
{
	float coneRayTexArea = calcConeRayTexArea(coneRay, rayDir, normal, uvWorldArea);
	return calcConeRayLod(coneRayTexArea, textureSize);
}
float calcConeRayLod(float anglePerPixel, float distance, float3 rayDir, float3 normal, float uvWorldArea, int2 textureSize)
{
	ConeRay coneRay = ConeRay(0.0f, anglePerPixel); propagateConeRay(coneRay, 0.0f, distance);
	return calcConeRayLod(coneRay, rayDir, normal, uvWorldArea, textureSize);
}

#endif // RAY_GSL