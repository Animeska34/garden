// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Weighted Blended Order Independent Transparency

#ifndef OIT_GSL
#define OIT_GSL

// Tuned for 16-bit floating point accumulation buffer
float computeOitWeight(float colorAlpha, float fragCoordZ)
{
	return clamp(pow(min(1.0f, colorAlpha * 10.0f) + 0.01f, 3.0f) * 
		1e8f * pow(1.0f - fragCoordZ * 0.9f, 3.0f), 1e-2f, 3e3f);
}
void computeOIT(float4 color, float fragCoordZ, out float4 accum, out float reveal)
{
	float weight = computeOitWeight(color.a, fragCoordZ);
	accum = float4(color.rgb * color.a, color.a) * weight;
	reveal = color.a;
}

#endif // OIT_GSL