// Copyright 2022-2024 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef MATH_GSL
#define MATH_GSL

#define M_E         2.71828182845904523536028747135266250  // e
#define M_LOG2E     1.44269504088896340735992468100189214  // log2(e)
#define M_LOG10E    0.434294481903251827651128918916605082 // log10(e)
#define M_LN2       0.693147180559945309417232121458176568 // loge(2)
#define M_LN10      2.30258509299404568401799145468436421  // loge(10)
#define M_PI        3.14159265358979323846264338327950288  // pi
#define M_PI_2      1.57079632679489661923132169163975144  // pi / 2
#define M_PI_4      0.785398163397448309615660845819875721 // pi / 4
#define M_1_PI      0.318309886183790671537767526745028724 // 1 / pi
#define M_2_PI      0.636619772367581343075535053490057448 // 2 / pi
#define M_2_SQRTPI  1.12837916709551257389615890312154517  // 2 / sqrt(pi)
#define M_SQRT2     1.41421356237309504880168872420969808  // sqrt(2)
#define M_SQRT3     1.73205080756887729352744634150587237  // sqrt(3)
#define M_SQRT1_2   0.707106781186547524400844362104849039 // 1 / sqrt(2)
#define M_SQRT_PI   1.77245385090551602729816748334114518  // sqrt(pi)

#define FLOAT_EPS3  0.001f
#define FLOAT_EPS6  0.000001f
#define FLOAT32_MAX 3.402823466e+38f
#define FLOAT32_MIN 1.175494351e-38f
#define FLOAT32_LOW -3.402823466e+38f
#define FLOAT64_MAX 1.7976931348623158e+308
#define FLOAT64_MIN 2.2250738585072014e-308
#define FLOAT64_LOW -1.7976931348623158e+308


#define INT8_MAX 127
#define INT8_MIN -128
#define INT16_MAX 32767
#define INT16_MIN -32768
#define INT32_MAX 2147483647
#define INT32_MIN -2147483648
#define INT64_MAX 9223372036854775807ll
#define INT64_MIN -9223372036854775808ll

#define UINT8_MAX 255u
#define UINT8_MIN 0u
#define UINT16_MAX 65535u
#define UINT16_MIN 0u
#define UINT32_MAX 4294967295u
#define UINT32_MIN 0u
#define UINT64_MAX 18446744073709551615ull
#define UINT64_MIN 0ull

//**********************************************************************************************************************
// C++ atan2 implementation.
float atan2(float y, float x)
{
	return abs(x) > abs(y) ? atan(y, x) : M_PI_2 - atan(x, y);
}

#endif // MATH_GSL