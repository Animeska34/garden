// Copyright 2022-2024 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef COLOR_SPACE_GSL
#define COLOR_SPACE_GSL

float3 rgbToXyz(float3 rgb)
{
	const float3x3 m = float3x3
	(
		0.4124564f, 0.2126729f, 0.0193339f,
		0.3575761f, 0.7151522f, 0.1191920f,
		0.1804375f, 0.0721750f, 0.9503041f
	);
	return m * rgb;
}
float3 xyzToRgb(float3 xyz)
{
	const float3x3 m = float3x3
	(
		 3.2404542f, -0.9692660f,  0.0556434f,
		-1.5371385f,  1.8760108f, -0.2040259f,
		-0.4985314f,  0.0415560f,  1.0572252f
	);
	return m * xyz;
}

float3 xyzToYxy(float3 xyz)
{
	float inv = 1.0f / dot(xyz, float3(1.0f));
	return float3(xyz.y, xyz.x * inv, xyz.y * inv);
}
float3 yxyToXyz(float3 yxy)
{
	float3 xyz;
	xyz.x = yxy.x * yxy.y / yxy.z;
	xyz.y = yxy.x;
	xyz.z = yxy.x * (1.0f - yxy.y - yxy.z) / yxy.z;
	return xyz;
}

float3 rgbToYxy(float3 rgb) { return xyzToYxy(rgbToXyz(rgb)); }
float3 yxyToRgb(float3 yxy) { return xyzToRgb(yxyToXyz(yxy)); }

#endif // COLOR_SPACE_GSL