// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef NOISE_GSL
#define NOISE_GSL

float3 permute(float3 x) { return mod(((x * 34.0f) + 1.0f) * x, 289.0f); }
float4 permute(float4 x) { return mod(((x * 34.0f) + 1.0f) * x, 289.0f); }
float4 taylorInvSqrt(float4 r) { return 1.79284291400159f - 0.85373472095314f * r; }

float simplexNoise(float2 v)
{
	const float4 c = float4(0.211324865405187f, 0.366025403784439f,
        -0.577350269189626f, 0.024390243902439f);

	float2 i = floor(v + dot(v, c.yy));
	float2 x0 = v - i + dot(i, c.xx);
	float2 i1 = (x0.x > x0.y) ? float2(1.0f, 0.0f) : float2(0.0f, 1.0f);
	float4 x12 = x0.xyxy + c.xxzz;
	x12.xy -= i1;

	i = mod(i, 289.0f);
	float3 p = permute(permute(i.y + float3(0.0f, i1.y, 1.0f)) + i.x + float3(0.0f, i1.x, 1.0f));
	float3 m = max(0.5f - float3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0f);
	m = m * m; m = m * m;

	float3 x = 2.0f * fract(p * c.www) - 1.0f;
	float3 h = abs(x) - 0.5f;
	float3 ox = floor(x + 0.5f);
	float3 a0 = x - ox;
	m *= 1.79284291400159f - 0.85373472095314f * (a0 * a0 + h * h);

	float3 g;
	g.x = a0.x * x0.x + h.x * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0f * dot(m, g);
}
float simplexNoise(float3 v)
{ 
	const float2 c = float2(1.0f / 6.0f, 1.0f / 3.0f);
	const float4 d = float4(0.0f, 0.5f, 1.0f, 2.0f);

	float3 i  = floor(v + dot(v, c.yyy));
	float3 x0 = v - i + dot(i, c.xxx);
	float3 g = step(x0.yzx, x0.xyz);
	float3 l = 1.0f - g;
	float3 i1 = min(g.xyz, l.zxy);
	float3 i2 = max(g.xyz, l.zxy);
	float3 x1 = x0 - i1 + 1.0f * c.xxx;
	float3 x2 = x0 - i2 + 2.0f * c.xxx;
	float3 x3 = x0 - 1.0f + 3.0f * c.xxx;

	i = mod(i, 289.0f); 
	float4 p = permute(permute(permute( 
		i.z + float4(0.0f, i1.z, i2.z, 1.0f)) + 
		i.y + float4(0.0f, i1.y, i2.y, 1.0f)) + 
		i.x + float4(0.0f, i1.x, i2.x, 1.0f));

	float n_ = 1.0f / 7.0f;
	float3  ns = n_ * d.wyz - d.xzx;
	float4 j = p - 49.0f * floor(p * ns.z * ns.z);
	float4 x_ = floor(j * ns.z);
	float4 y_ = floor(j - 7.0f * x_);
	float4 x = x_ * ns.x + ns.yyyy;
	float4 y = y_ * ns.x + ns.yyyy;
	float4 h = 1.0f - abs(x) - abs(y);
	float4 b0 = float4(x.xy, y.xy);
	float4 b1 = float4(x.zw, y.zw);
	float4 s0 = floor(b0) * 2.0 + 1.0f;
	float4 s1 = floor(b1) * 2.0f + 1.0f;
	float4 sh = -step(h, float4(0.0f));
	float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
	float3 p0 = float3(a0.xy, h.x);
	float3 p1 = float3(a0.zw, h.y);
	float3 p2 = float3(a1.xy, h.z);
	float3 p3 = float3(a1.zw, h.w);

	float4 norm = taylorInvSqrt(float4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	float4 m = max(0.6f - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0f);
	m = m * m;
	return 42.0f * dot(m * m, float4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}

#endif // NOISE_GSL