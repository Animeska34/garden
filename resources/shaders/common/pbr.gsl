// Copyright 2022-2024 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Physically Based Rendering

#ifndef PBR_GSL
#define PBR_GSL

#include "brdf.gsl"
#include "light.gsl"

struct PbrMaterial
{
	float3 baseColor;
	float3 viewDirection;
	float3 normal;
	float3 shadowColor;
	float metallic;
	float roughness; 
	float reflectance;
	float ambientOcclusion;
	float shadow;
};

// Note: Material roughness is perceptual.
// roughness = perceptual * perceptual

// Reflectance
// 1.0 = Diamond (16%)
// 0.7 = Rubby (8%)
// 0.5 = Common (4%)
// 0.35 = Water (2%)

//**********************************************************************************************************************
float3 surfaceBRDF(PbrMaterial pbrMaterial, Light light, sampler2D dfgLUT)
{
	pbrMaterial.roughness = max(pbrMaterial.roughness, 0.045f); // Perceptual.
	float3 h = normalize(pbrMaterial.viewDirection + light.direction);
	float nov = abs(dot(pbrMaterial.normal, pbrMaterial.viewDirection)) + 1e-5f;
	float nol = clamp(dot(pbrMaterial.normal, light.direction), 0.0f, 1.0f);
	float noh = clamp(dot(pbrMaterial.normal, h), 0.0f, 1.0f);
	float loh = clamp(dot(light.direction, h), 0.0f, 1.0f);
	float reflectance = computeDielectricF0(pbrMaterial.reflectance);
	float3 f0 = computeF0(pbrMaterial.baseColor, pbrMaterial.metallic, reflectance);
	
	float3 fr = specularLobe(noh, nov, nol, loh, f0, pbrMaterial.roughness);
	float3 fd = diffuseLobe(pbrMaterial.baseColor, pbrMaterial.metallic);

	float3 energyCompensation = computeEnergyCompensation(dfgLUT, nov, pbrMaterial.roughness, f0);
	float3 color = fd + fr * energyCompensation;

    return (color * light.color) * (light.intensity * light.attenuation * nol);
}

// TODO: support another shading models:
// * anisotropy shading model for brushed metals.
// * clearcoat for soda cans and car paint.
// * sheen for cloth.

float3 evaluateDirectLight(PbrMaterial pbrMaterial, DirectLight directLight, sampler2D dfgLUT)
{
	Light light = Light(directLight.color, directLight.intensity, directLight.direction, 1.0f);
	return surfaceBRDF(pbrMaterial, light, dfgLUT);
}

float3 getReflectedVector(float linearRoughness, float3 normal, float3 reflected)
{
	return mix(reflected, normal, linearRoughness * linearRoughness);
}

//**********************************************************************************************************************
float3 evaluateIBL(PbrMaterial pbrMaterial, sampler2D dfgLUT, const float4 iblSH[SH_COEF_COUNT], samplerCube iblSpecular)
{
	pbrMaterial.roughness = max(pbrMaterial.roughness, 0.045f); // Perceptual.
	float nov = abs(dot(pbrMaterial.normal, pbrMaterial.viewDirection)) + 1e-5f;
	float reflectance = computeDielectricF0(pbrMaterial.reflectance);
	float3 f0 = computeF0(pbrMaterial.baseColor, pbrMaterial.metallic, reflectance);
	float3 e = specularDFG(dfgLUT, nov, pbrMaterial.roughness, f0);
	float3 reflected = reflect(-pbrMaterial.viewDirection, pbrMaterial.normal);
	float linearRoughness = pbrMaterial.roughness * pbrMaterial.roughness;
	float3 r = getReflectedVector(linearRoughness, pbrMaterial.normal, reflected);

	// TODO: Implement SSR
	
	float3 radiance = pbrMaterial.shadow < 1.0f ? pbrMaterial.shadowColor * pbrMaterial.shadow :
		prefilteredRadiance(iblSpecular, r, pbrMaterial.roughness);
	float3 energyCompensation = computeEnergyCompensation(dfgLUT, nov, pbrMaterial.roughness, f0);
	float3 fr = e * radiance * energyCompensation;

	float3 diffuseColor = computeDiffuseColor(pbrMaterial.baseColor, pbrMaterial.metallic);
	float3 irradiance = pbrMaterial.shadow < 1.0f ? pbrMaterial.shadowColor * pbrMaterial.shadow :
		diffuseIrradiance(pbrMaterial.normal, iblSH);
	float3 fd = diffuseColor * irradiance * (1.0f - e);

	// TODO: disable AO calculations if SSAO is unused.
	float diffuseAO = pbrMaterial.ambientOcclusion;
	float specularAO = specularAoLagarde(nov, diffuseAO, linearRoughness);
	fd *= gtaoMultiBounce(diffuseAO, diffuseColor);
	fr *= gtaoMultiBounce(specularAO, f0);
	
	return fd + fr;
}

#endif // PBR_GSL