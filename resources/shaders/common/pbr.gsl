// Copyright 2022-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Physically Based Rendering

// Note: Material roughness is perceptual.
// roughness = perceptual * perceptual

// Reflectance
// 1.0  = Diamond (16%)
// 0.7  = Ruby    ( 8%)
// 0.5  = Common  ( 4%)
// 0.35 = Water   ( 2%)

#ifndef PBR_GSL
#define PBR_GSL

#include "common/brdf.gsl"
#include "common/light.gsl"
#include "common/gbuffer.gsl"

//**********************************************************************************************************************
float3 evaluateIBL(const GBufferValues gBuffer, float4 shadow, float3 viewDirection, 
	sampler2D dfgLUT, const float4 shBuffer[SH_COEFF_COUNT], samplerCube iblSpecular)
{
	float roughness = max(gBuffer.roughness, 0.045f); // Perceptual.
	float nov = max(dot(gBuffer.normal, -viewDirection), 1e-4f);
	float reflectance = computeDielectricF0(gBuffer.reflectance);
	float3 f0 = computeF0(gBuffer.baseColor, gBuffer.metallic, reflectance);
	float3 e = specularDFG(dfgLUT, nov, roughness, f0);
	float3 reflected = reflect(viewDirection, gBuffer.normal);
	float linearRoughness = unpackRoughness(roughness);
	float3 r = computeReflectedVector(linearRoughness, gBuffer.normal, reflected);
	
	float3 radiance = prefilteredRadiance(iblSpecular, r, roughness) * shadow.a;
	float3 energyCompensation = computeEnergyCompensation(dfgLUT, nov, roughness, f0);
	float3 fr = e * radiance * energyCompensation * gBuffer.specularFactor;

	float3 diffuseColor = computeDiffuseColor(gBuffer.baseColor, gBuffer.metallic);
	float3 irradiance = mix(gBuffer.giColor, diffuseIrradiance(gBuffer.normal, shBuffer), shadow.a);
	float3 fd = diffuseColor * (1.0f - e) * irradiance * shadow.rgb;

	if (USE_SUB_SURFACE_SCATTERING && gBuffer.thickness < 1.0f && gBuffer.transmission == 0.0f)
	{
		float3 viewDependent = prefilteredRadiance(iblSpecular, 
			viewDirection, linearRoughness, 1.0 + gBuffer.thickness);
		float attenuation = (1.0 - gBuffer.thickness) / (2.0 * M_PI);
		fd += gBuffer.subsurfaceColor * (irradiance + viewDependent) * attenuation;
		// If have cloth model:  fd *= clamp(gBuffer.subsurfaceColor + nov, 0.0f, 1.0f);
	}

	if (gBuffer.ambientOcclusion < 1.0f)
	{
		float specularAO = specularAoLagarde(nov, gBuffer.ambientOcclusion, linearRoughness);
		fd *= gtaoMultiBounce(gBuffer.ambientOcclusion, diffuseColor);
		fr *= gtaoMultiBounce(specularAO, f0);
	}

	/// TODO: evaluateSheenIBL();

	if (gBuffer.clearCoatRoughness > 0.0)
	{
		float clearCoatNov = max(dot(gBuffer.normal, -viewDirection), 1e-4f);
		float3 clearCoatR = reflect(viewDirection, gBuffer.clearCoatNormal);
		float fc = schlick(0.04f, 1.0f, clearCoatNov);
		float attenuation = 1.0f - fc;
		fd *= attenuation; fr *= attenuation;

		float clearCoatRoughness = max(gBuffer.clearCoatRoughness, 0.045f); // Perceptual.
		float ccLinearRoughness = unpackRoughness(clearCoatRoughness);
		float specularAO = specularAoLagarde(clearCoatNov, gBuffer.ambientOcclusion, ccLinearRoughness);
		fr += prefilteredRadiance(iblSpecular, clearCoatR, clearCoatRoughness) * (specularAO * fc);
    }

	if (gBuffer.transmission > 0.0f)
	{
		float3 ft = gBuffer.refractedColor;
		ft *= min(float3(1.0), exp(-gBuffer.absorptionColor * 
			gBuffer.thickness)) * (1.0f - e) * gBuffer.transmission;
		fd = fd * (1.0f - gBuffer.transmission) + ft;
	}
	
	return fd + fr;
}

// TODO: support anisotropy shading model for brushed metals.

#endif // PBR_GSL