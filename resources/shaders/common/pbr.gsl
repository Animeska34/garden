// Copyright 2022-2024 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Physically Based Rendering

// Note: Material roughness is perceptual.
// roughness = perceptual * perceptual

// Reflectance
// 1.0  = Diamond (16%)
// 0.7  = Ruby    ( 8%)
// 0.5  = Common  ( 4%)
// 0.35 = Water   ( 2%)

#ifndef PBR_GSL
#define PBR_GSL

#include "common/brdf.gsl"
#include "common/light.gsl"
#include "common/gbuffer.gsl"

//**********************************************************************************************************************
float3 surfaceBRDF(GBufferValues gBuffer, Light light, float3 viewDirection, sampler2D dfgLUT)
{
	float roughness = max(gBuffer.roughness, 0.045f); // Perceptual, clamped.
	float3 h = normalize(viewDirection + light.direction);
	float nov = abs(dot(gBuffer.normal, viewDirection)) + 1e-5f;
	float nol = clamp(dot(gBuffer.normal, light.direction), 0.0f, 1.0f);
	float noh = clamp(dot(gBuffer.normal, h), 0.0f, 1.0f);
	float loh = clamp(dot(light.direction, h), 0.0f, 1.0f);
	float reflectance = computeDielectricF0(gBuffer.reflectance);
	float3 f0 = computeF0(gBuffer.baseColor.rgb, gBuffer.metallic, reflectance);
	
	float3 fr = specularLobe(noh, nov, nol, loh, f0, roughness);
	float3 fd = diffuseLobe(gBuffer.baseColor.rgb, gBuffer.metallic);

	float3 energyCompensation = computeEnergyCompensation(dfgLUT, nov, roughness, f0);
	float3 color = fd + fr * energyCompensation;

    return (color * light.color) * (light.intensity * light.attenuation * nol);
}
float3 evaluateDirectLight(GBufferValues gBuffer, DirectLight directLight, float3 viewDirection, sampler2D dfgLUT)
{
	Light light = Light(directLight.color, directLight.intensity, directLight.direction, 1.0f);
	return surfaceBRDF(gBuffer, light, viewDirection, dfgLUT);
}

//**********************************************************************************************************************
float3 evaluateIBL(GBufferValues gBuffer, float4 shadow, float3 viewDirection, 
	sampler2D dfgLUT, const float4 iblSH[SH_COEF_COUNT], samplerCube iblSpecular)
{
	float3 shadowColor = shadow.rgb * shadow.a;
	float roughness = max(gBuffer.roughness, 0.045f); // Perceptual.
	float nov = abs(dot(gBuffer.normal, viewDirection)) + 1e-5f;
	float reflectance = computeDielectricF0(gBuffer.reflectance);
	float3 f0 = computeF0(gBuffer.baseColor.rgb, gBuffer.metallic, reflectance);
	float3 e = specularDFG(dfgLUT, nov, roughness, f0);
	float3 reflected = reflect(-viewDirection, gBuffer.normal);
	float linearRoughness = roughness * roughness;
	float3 r = computeReflectedVector(linearRoughness, gBuffer.normal, reflected);

	// TODO: Implement SSR
	
	float3 radiance = shadow.a < 1.0f ? shadowColor : prefilteredRadiance(iblSpecular, r, roughness);
	float3 energyCompensation = computeEnergyCompensation(dfgLUT, nov, roughness, f0);
	float3 fr = e * radiance * energyCompensation;

	float3 diffuseColor = computeDiffuseColor(gBuffer.baseColor.rgb, gBuffer.metallic);
	float3 irradiance = shadow.a < 1.0f ? shadowColor : diffuseIrradiance(gBuffer.normal, iblSH);
	float3 fd = diffuseColor * irradiance * (1.0f - e);

	if (gBuffer.thickness < 1.0f)
	{
		float3 viewDependent = prefilteredRadiance(iblSpecular, 
			-viewDirection, linearRoughness, 1.0 + gBuffer.thickness);
		float attenuation = (1.0 - gBuffer.thickness) / (2.0 * M_PI);
		fd += gBuffer.subsurfaceColor * (irradiance + viewDependent) * attenuation;
		// If have cloth model:  fd *= clamp(gBuffer.subsurfaceColor + nov, 0.0f, 1.0f);
	}

	if (gBuffer.ambientOcclusion < 1.0f)
	{
		float diffuseAO = gBuffer.ambientOcclusion;
		float specularAO = specularAoLagarde(nov, diffuseAO, linearRoughness);
		fd *= gtaoMultiBounce(diffuseAO, diffuseColor);
		fr *= gtaoMultiBounce(specularAO, f0);
	}

	/// TODO: evaluateSheenIBL();
	
	return fd + fr;
}

// TODO: support another shading models:
// * anisotropy shading model for brushed metals.

#endif // PBR_GSL