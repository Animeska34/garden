// Copyright 2022-2024 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#include "garden/os.hpp"
#include "garden/arch.hpp"
#include "garden/simd.hpp"
#include "garden/error.hpp"

#include "math/types.hpp"
#include "math/version.hpp"

#include <filesystem>
#include <string_view>

//******************************************************************************************************************
#define __GARDEN__
#define GARDEN_NAME_STRING "Garden"
#define GARDEN_VERSION_MAJOR @Garden_VERSION_MAJOR@
#define GARDEN_VERSION_MINOR @Garden_VERSION_MINOR@
#define GARDEN_VERSION_PATCH @Garden_VERSION_PATCH@
#define GARDEN_VERSION Version(GARDEN_VERSION_MAJOR, GARDEN_VERSION_MINOR, GARDEN_VERSION_PATCH)
#define GARDEN_VERSION_STRING "@Garden_VERSION@"
#define GARDEN_LITTLE_ENDIAN @GARDEN_LITTLE_ENDIAN@
#define GARDEN_DEBUG @GARDEN_DEBUG@
#define GARDEN_EDITOR @GARDEN_EDITOR@
#define GARDEN_PACK_RESOURCES @GARDEN_PACK_RESOURCES@
#define GARDEN_GAPI_VALIDATIONS @GARDEN_GAPI_VALIDATIONS@
#define GARDEN_TRACY_PROFILER @GARDEN_TRACY_PROFILER@
#define GARDEN_CURRENT_YEAR "@GARDEN_CURRENT_YEAR@"

#if GARDEN_DEBUG
/**
 * @brief Garden resources directory path.
 */
#define GARDEN_RESOURCES_PATH std::filesystem::path("@Garden_SOURCE_DIR@/resources")

#if _WIN32
#define __PRETTY_FUNCTION__ __FUNCSIG__
#endif

/**
 * @brief Prints error and aborts program if statement is not true.
 * @param statement target statement
 */
#define GARDEN_ASSERT(statement)                                           \
{                                                                          \
	if (!(statement))                                                      \
	{                                                                      \
		printf("Assertion failed: (%s), function %s, file %s, line %d.\n", \
			#statement, __PRETTY_FUNCTION__, __FILE__, __LINE__);          \
		abort();                                                           \
	}                                                                      \
} (void)0
#else
/**
 * @brief Prints error and aborts program if statement is not true.
 * @param statement target statement
 */
#define GARDEN_ASSERT(statement) (void)0
#endif

namespace garden
{

using namespace std;
using namespace math;

namespace fs = std::filesystem;

/***************************************************************************************************************
 * @brief Allocates memory blocks.
 * @tparam T target element type
 * @param elementCount number of elements
 * @throw GardenError if failed to allocate
 */
template<typename T>
static T* malloc(psize elementCount)
{
	auto memoryBlock = ::malloc(elementCount * sizeof(T));
	if (!memoryBlock)
	{
		throw GardenError("Failed to allocate memory block. ("
			"size: " + to_string(elementCount * sizeof(T)) + ")");
	}
	return (T*)memoryBlock;
}
/**
 * @brief Allocates an array in memory with elements initialized to 0.
 * @tparam T target element type
 * @param elementCount number of elements
 * @throw GardenError if failed to allocate
 */
template<typename T>
static T* calloc(psize elementCount)
{
	auto memoryBlock = ::calloc(elementCount, sizeof(T));
	if (!memoryBlock)
	{
		throw GardenError("Failed to allocate memory block. ("
			"size: " + to_string(elementCount * sizeof(T)) + ")");
	}
	return (T*)memoryBlock;
}
/**
 * @brief Reallocates memory blocks.
 * @tparam T target element type
 * @param oldMemoryBlock old allocated memory block
 * @param elementCount number of elements
 * @throw GardenError if failed to reallocate
 */
template<typename T>
static T* realloc(T* oldMemoryBlock, psize elementCount)
{
	auto newMemoryBlock = ::realloc(oldMemoryBlock, elementCount * sizeof(T));
	if (!newMemoryBlock)
	{
		throw GardenError("Failed to reallocate memory block. ("
			"size: " + to_string(elementCount * sizeof(T)) + ")");
	}
	return (T*)newMemoryBlock;
}

} // namespace garden